import type {
  GetServerSidePropsContext,
  InferGetServerSidePropsType,
} from "next";
import { getProviders, signIn } from "next-auth/react";
import { getServerSession } from "next-auth/next";
import Head from "next/head";
import { authOptions } from "~/server/auth";
import { useState } from "react";
import Link from "next/link";

export default function SignIn({
  providers,
}: InferGetServerSidePropsType<typeof getServerSideProps>) {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");

  return (
    <>
      <Head>
        <title>Hyrule Help</title>
        <meta name="description" content="Generated by create t3 app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto max-w-lg pt-20">
        <div className="card bg-base-100 shadow-xl">
          <div className="card-body items-center text-center">
            <h1 className="card-title mb-4 text-3xl">Sign In</h1>

            <div className="card-body w-full justify-end">
              {Object.values(providers).map((provider) => {
                if (provider.id === "credentials") {
                  return (
                    <>
                      <div className="divider w-full" />
                      <form
                        className="w-full"
                        key={provider.name}
                        onSubmit={(e) => {
                          e.preventDefault();
                          void signIn("credentials", {
                            username,
                            password,
                          });
                        }}
                      >
                        <label className="label">
                          <span className="label-text">Username</span>
                        </label>
                        <input
                          value={username}
                          onChange={(e) => setUsername(e.target.value)}
                          type="text"
                          className="input-bordered input w-full"
                          required
                        />
                        <label className="label">
                          <span className="label-text">Password</span>
                        </label>
                        <input
                          value={password}
                          onChange={(e) => setPassword(e.target.value)}
                          type="password"
                          className="input-bordered input w-full"
                          required
                        />

                        <button
                          type="submit"
                          className="btn-primary btn-block btn mt-4"
                        >
                          Sign in
                        </button>
                      </form>
                    </>
                  );
                }

                return (
                  <button
                    key={provider.name}
                    className="btn-primary btn w-full"
                    onClick={() => void signIn(provider.id)}
                  >
                    Sign in with {provider.name}
                  </button>
                );
              })}
            </div>
            <div className="card-actions">
              <div>
                <p>
                  No account, create one{" "}
                  <Link href="/sign-up" className="link-accent link">
                    here
                  </Link>
                </p>
              </div>
            </div>
          </div>
        </div>
      </main>
    </>
  );
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const session = await getServerSession(context.req, context.res, authOptions);

  // If the user is already logged in, redirect.
  // Note: Make sure not to redirect to the same page
  // To avoid an infinite loop!
  if (session) {
    return { redirect: { destination: "/questions" } };
  }

  const providers = await getProviders();

  return {
    props: { providers: providers ?? [] },
  };
}
